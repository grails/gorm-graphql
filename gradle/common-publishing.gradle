/**
 * To use this when setting up Travis run the following commands to encrypt
 * the necessary environment variables for publishing to work
 *
 * $ travis encrypt SIGNING_PASSPHRASE=...
 * $ travis encrypt SONATYPE_USERNAME=...
 * $ travis encrypt SONATYPE_PASSWORD=...
 * $ travis encrypt ARTIFACTORY_USERNAME=...
 * $ travis encrypt ARTIFACTORY_PASSWORD=...
 * $ travis encrypt BINTRAY_USER=...
 * $ travis encrypt BINTRAY_KEY=...
 *
 */
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
if(!isGrailsPlugin) {
    apply plugin: 'com.bmuschko.nexus'
}


ext.pomInfo = {
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url projectUrl

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if(developers) {
        delegate.developers {
            for(dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev
                }
            }
        }
    }
}

if(!isGrailsPlugin) {
    modifyPom {
        project(pomInfo)
    }
}

publishing {

    repositories {
        maven {
            credentials {
                def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                username = u
                password = p
            }
            if(isGrailsPlugin) {
                if(isBuildSnapshot) {
                    url  "https://repo.grails.org/grails/plugins3-snapshots-local"
                }
                else {
                    url  "https://repo.grails.org/grails/plugins3-releases-local"
                }
            }
            else {
                if(isBuildSnapshot) {
                    url  "https://repo.grails.org/grails/libs-snapshots-local"
                }
                else {
                    url "https://repo.grails.org/grails/libs-releases-local"
                }
            }
        }
    }

    publications {
        maven(MavenPublication) {
            if(isGrailsPlugin) {
                artifactId( project.name - 'plugin-gorm-' )
            }
            else if(project.name.contains('/')) {
                artifactId( project.name.substring(project.name.indexOf('/') + 1) )
            }

            from components.java

            afterEvaluate {
                artifact source: sourcesJar, classifier: "sources"
                artifact source: javadocJar, classifier: "javadoc"
            }
            if(isGrailsPlugin) {
                artifact source:"${project.buildDir}/classes/groovy/main/META-INF/grails-plugin.xml",
                        classifier:"plugin",
                        extension:'xml'
            }
            pom.withXml {
                def xml = asNode()

                xml.children().last() + pomInfo
            }

        }
    }
}

bintray {
    def u = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
    def p = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''

    user = u
    key = p
    publications = ['maven']
    publish = true
    pkg {
        repo = isGrailsPlugin ? 'plugins' : 'grails-core'
        userOrg = 'grails'
        name = isGrailsPlugin ? project.name - 'grails-plugin-' : project.name
        desc = "${project.title} - ${project.projectDesc}".toString()
        websiteUrl = projectUrl
        issueTrackerUrl = "https://github.com/$githubSlug/issues"
        vcsUrl = "https://github.com/$githubSlug"
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        version {
            name = project.version
            gpg {
                sign = true
                passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
            }
            mavenCentralSync {
                sync = project.hasProperty("mavenCentralSync") ? project.mavenCentralSync.toBoolean() : false
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                user = ossUser
                password = ossPass
            }

        }
    }
}